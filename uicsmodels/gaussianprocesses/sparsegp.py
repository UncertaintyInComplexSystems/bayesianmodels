from uicsmodels.bayesianmodels import BayesianModel, GibbsState, ArrayTree
from uicsmodels.sampling.inference import update_correlated_gaussian, update_metropolis
from uicsmodels.gaussianprocesses.meanfunctions import Zero
from uicsmodels.gaussianprocesses.likelihoods import AbstractLikelihood, Gaussian
from uicsmodels.gaussianprocesses.fullgp import FullGPModel

from jax import Array
from jaxtyping import Float
from jax.random import PRNGKeyArray as PRNGKey
from typing import Callable, Union, Dict, Any, Optional, Iterable, Mapping

ArrayTree = Union[Array, Iterable["ArrayTree"], Mapping[Any, "ArrayTree"]]

import jax
import distrax as dx
import jax.numpy as jnp
from jax.random import PRNGKey
import jax.random as jrnd
from blackjax import elliptical_slice, rmh

import numpy as np

from tensorflow_probability.substrates import jax as tfp
tfd = tfp.distributions
tfb = tfp.bijectors

jitter = 1e-6


class SparseGPModel(FullGPModel):  
    # TODO: Change to BayesianModel? need to change init function for that.

    """The latent Gaussian process model.
    
    The latent Gaussian process model consists of observations (y), generated by
    an observation model that takes the latent Gaussian process (f) and optional
    hyperparameters (phi) as input. The latent GP itself is parametrized by a
    mean function (mu) and a covariance function (cov). These can have optional
    hyperparameters (psi) and (theta).

    The generative model is given by:

    .. math::
        psi     &\sim p(\psi)\\
        theta   &\sim p(\theta) \\
        phi     &\sim p(\phi) \\
        f       &\sim GP(mu, cov) \\
        y       &\sim p(y \mid T(f), phi)

    """
    # NOTE: Update description
    # TODO: Change to factorize out f. 

    def __init__(self, X, y,
                 cov_fn: Optional[Callable],
                 mean_fn: Callable = None,
                 priors: Dict = None,
                 likelihood: AbstractLikelihood = None,
                 num_inducing_points: int = None,
                 f_true = None):  # TODO: Remove after debugging
        if likelihood is None:
            likelihood = Gaussian()
        self.likelihood = likelihood
        self.m = num_inducing_points  # TODO: Instead of passing, infer from prior over inducing inputs
        self.f_true = f_true
        super().__init__(X, y, cov_fn, mean_fn, priors)        
        

    #
    def __get_component_parameters(self, position, component):
        """Extract parameter sampled values per model component for current
        position.

        """
        return {param: position[param] for param in
                self.param_priors[component]} if component in self.param_priors else {}

    #
    def _compute_sparse_gp(self, cov_params, x, samples_Z, samples_u):
        """
        Returns mean and covariance matrix of sparse gp
        """
        cov_XX = self.cov_fn.cross_covariance(
            params=cov_params,
            x=x, y=x) + jitter * jnp.eye(x.shape[0])
        # np.linalg.cholesky(cov_XX) # HACK to check pos. def.
        
        cov_ZZ = self.cov_fn.cross_covariance(
            params=cov_params,
            x=samples_Z, y=samples_Z) + jitter * jnp.eye(samples_Z.shape[0])
        # np.linalg.cholesky(cov_ZZ) # HACK to check pos. def. 

        cov_XZ = self.cov_fn.cross_covariance(
            params=cov_params,
            x=x, y=samples_Z) # + jitter * jnp.eye(self.n, self.m)
        cov_ZX = jnp.transpose(cov_XZ)

        mean_gp = jnp.dot(cov_XZ, jnp.linalg.solve(cov_ZZ, samples_u))

        ZZ_ZX = jnp.linalg.solve(cov_ZZ, cov_ZX)
        cov_gp = cov_XX - jnp.dot(cov_XZ, ZZ_ZX)
        # np.linalg.cholesky(cov_gp)

        # cov_gp = cov_gp * jnp.eye(x.shape[0])  # HACK: MAking cov diagonal.

        return mean_gp, cov_gp

    #   
    def init_fn(self, key, num_particles=1):
        """Initialization of the Gibbs state.

        The initial state is determined by sampling all variables from their
        priors, and then constructing one sample for (f) using these. All
        variables together are stored in a dict() in the GibbsState object.

        When num_particles > 1, each dict element contains num_particles random
        initial values.

        Args:
            key:
                The jax.random.PRNGKey
            num_particles: int
                The number of parallel particles for sequential Monte Carlo
        Returns:
            GibbsState
        """
        
        key, key_super_init = jrnd.split(key)
        initial_state = super().init_fn(key_super_init, num_particles)

        def sample_latent(key, initial_position_):
            _, *sub_key = jrnd.split(key, num=4)
            key_sample_z = sub_key[0]
            key_sample_u = sub_key[1]
            key_sample_f = sub_key[2]
     
            # GP mean
            if 'mean_function' in self.param_priors.keys():
                mean_params = {param: initial_position_[param] for param in self.param_priors['mean_function']} 
                mean = self.mean_fn.mean(params=mean_params, x=self.X)
            else:
                # mean = jnp.zeros_like(self.X)
                mean = jnp.zeros((self.X.shape[0], ))
            if jnp.ndim(mean) == 1: 
                mean = mean[:, jnp.newaxis]

        # GP cov. 
            cov_params = {param: initial_position_[param] for param in self.param_priors['kernel']}
            
            # print('X', jnp.min(self.X), jnp.max(self.X))
            # HACK: Quick 'fix' to 'deal' with missing parameters when computing covariances of Z. 
            assert cov_params, 'cov_params not specified, will break sampling Z'


        # sample M inducing inputs Z
            Z_params = {param: initial_position_[param] for param in self.param_priors['inducing_inputs_Z']}
            # print(f"params Z: {Z_params['mean'][0:3]}..., {Z_params['scale'][0:3]}...")

            # samples_Z = dx.Normal(   
            #     loc=Z_params['mean'],
            #     scale=Z_params['scale']).sample(seed=key_sample_z)
            # HACK: evenly-spaced Z in x domain
            #   allows drawing true u samples
            lin_Z = np.linspace(
                jnp.min(self.X), 
                jnp.max(self.X), 
                self.m)
            samples_Z_idx = jnp.searchsorted(self.X.flatten(), lin_Z)  # find closest values in X-domain
            samples_Z = self.X.flatten()[samples_Z_idx]
            # print(f"samples_Z: {samples_Z.shape} {samples_Z[0:3]}...")


        # Sample inducing variables u
                # NOTE: To account for SMC particles, add dimension in `jrnd.normal`
            # mean_u = jnp.zeros(samples_Z.shape[0])
            # samples_u = jnp.asarray(mean_u + jnp.dot(
            #     jnp.linalg.cholesky(cov_ZZ),
            #     jrnd.normal(key_sample_u, shape=[samples_Z.shape[0]])))
            samples_u = self.f_true[samples_Z_idx] # HACK: Drawing true samples

        # compute mean and cov. function of sparse GP            
            mean_gp, cov_gp = self._compute_sparse_gp(
                    cov_params=cov_params, 
                    x=self.X,
                    samples_Z=samples_Z, 
                    samples_u=samples_u)
            cov_gp += jitter * jnp.eye(self.n)


        # Sample from GP
            # NOTE: tell cholesky that the cov. is diagonal, if I set it too. 
            # NOTE: To account for SMC particles, add dimension in `jrnd.normal`
            L = jnp.linalg.cholesky(cov_gp)
            z = jrnd.normal(key_sample_f, shape=[self.n])
            samples_f = jnp.asarray(mean_gp + jnp.dot(L, z))
            # print('samples_f', samples_f.shape, samples_f[0:5])
            
            return samples_Z.flatten(), samples_u, samples_f.flatten()

        #
        initial_position = initial_state.position

        if num_particles > 1:
            # We vmap across the first dimension of the elements *in* the
            # dictionary, rather than over the dictionary itself.
            key_sample_particles = jrnd.split(key, num_particles)

            samples_Z, samples_u, samples_f = jax.vmap(
                sample_latent,
                in_axes=(
                    0, 
                    {k: 0 for k in initial_position}))(key_sample_particles, initial_position)
        else:
            # HACK: Might be better to recieve a namedtuple from from `sample_latent`, or two tuples, one with names and the other with corresponding data
            _, key_sample_latents = jrnd.split(key)

            samples_Z, samples_u, samples_f = sample_latent(
                key_sample_latents, initial_position)

        initial_position['Z'] = samples_Z
        initial_position['u'] = samples_u
        initial_position['f'] = samples_f
        
        return GibbsState(initial_position)

        #

    def gibbs_fn(self, key, state, loglik_fn__=None, temperature=1.0, **mcmc_parameters): # HACK: Gave loglik_fn None as default
        """The Gibbs MCMC kernel.

        The Gibbs kernel step function takes a state and returns a new state. In
        the latent GP model, the latent GP (f) is first updated, then the
        parameters of the mean (psi) and covariance function (theta), and lastly
        the parameters of the observation model (phi).

        Args:
            key:
                The jax.random.PRNGKey
            state: GibbsState
                The current state in the MCMC sampler
        Returns:
            GibbsState

        """
    
        # get current hypter-parameters from gibbs-state
        position = state.position.copy()

        likelihood_params = self.__get_component_parameters(position, 'likelihood')
        mean_params = self.__get_component_parameters(position, 'mean')
        cov_params = self.__get_component_parameters(position, 'kernel')

        """Sample the latent GP using:

        p(f | theta, psi, y) \propto p(y | f, phi) p(f | psi, theta)

        """
        # compute new mean and covariance matrix of sparse latent GP
        mean, cov = self._compute_sparse_gp(
                    cov_params=cov_params, 
                    x=self.X,
                    samples_Z=position['Z'], 
                    samples_u=position['u'])
        # cov += likelihood_params['obs_noise'] * jnp.eye(self.n)
        cov += jitter * jnp.eye(self.n)

        loglikelihood_fn_ = lambda f_: temperature * jnp.sum(self.likelihood.log_prob(params=likelihood_params, f=f_, y=self.y))

        key, subkey = jrnd.split(key)
        position['f'], f_info = update_correlated_gaussian(
            subkey, 
            position['f'], 
            loglikelihood_fn_, 
            mean, cov)

        # update cov parameters 
        # if len(cov_params):  # theta
        if True:  # HACK: Deactivated cov update
            """Sample parameters of the kernel function using: 

            p(theta | u, Z, f, X) \propto 
                p(f | u, Z, theta, X) p(u | Z, theta) p(theta)
            """

            def logdensity_fn_(theta_):
                log_pdf = 0

            # p(theta) | cov. kernel parameter
                for param, val in theta_.items():
                    pdf = jnp.sum(self.param_priors['kernel'][param].log_prob(val))
                    log_pdf += pdf
                    # if param == 'lengthscale':
                    #     jax.debug.print(
                    #         "🧐 p(theta) lengthscale: {logd} {d} {val}",
                    #         logd = pdf, d=jnp.exp(pdf), val=val)
                
            # p(u | Z, theta)
                mean_u = self.mean_fn.mean(params=mean_params, x=position['Z'])
                cov_u = self.cov_fn.cross_covariance(
                    params=theta_,
                    x=position['Z'],
                    y=position['Z'])
                pdf = dx.MultivariateNormalFullCovariance(mean_u, cov_u).log_prob(position['u'])
                log_pdf += pdf
                # jax.debug.print(
                #     "🧐 p(u | Z, theta): {logd} {d}", 
                #     logd = pdf, d=jnp.exp(pdf)) 

            # p(f | u, Z, theta, X)
                mean_gp, cov_gp = self._compute_sparse_gp(
                    cov_params=theta_, 
                    x=self.X,
                    samples_Z=position['Z'],
                    samples_u=position['u'])
                
                # cov_gp += likelihood_params['obs_noise'] * jnp.eye(self.n)
                cov_gp += jitter * jnp.eye(self.n)
                pdf = dx.MultivariateNormalFullCovariance(
                    mean_gp, cov_gp).log_prob(position['f'])
                log_pdf += pdf
                # jax.debug.print(
                #     "🧐 p(f | u, Z, theta, X): {logd} {d}", 
                #     logd = pdf, d=jnp.exp(pdf))
                # jax.debug.print("{d}", d=pdf.shape)
                
                # jax.debug.print(
                #     "🧐 log pdf: {pdf}", pdf = pdf)
                # jax.debug.print("{d}", d=(position['f']).shape)
                # jax.debug.print('---------------------------------\n')
                
                return log_pdf

            #
            key, subkey = jrnd.split(key)
            sub_state, sub_info = update_metropolis(
                subkey, 
                logdensity_fn_, 
                cov_params, 
                stepsize=mcmc_parameters.get(
                    'stepsizes', 
                    dict()).get('kernel', 0.1))  # NOTE: original was 0.1
            
            # jax.debug.print(
            #     "🧐 gibbs cov acceptance rate {d}", 
            #     d = sub_info.acceptance_rate)
            
            for param, val in sub_state.items():
                position[param] = val
        #

        # update likelihood
        if False:
        # if len(likelihood_params):  # not specifed in Rossi # TODO: 'deactived' for now, need to adapt update function first.
            """Sample parameters of the likelihood using: 

            p(\phi | y, f) \propto p(y | f, phi)p(phi)

            """

            def logdensity_fn_(phi_):
                log_pdf = 0
                for param, val in phi_.items():
                    log_pdf += jnp.sum(self.param_priors['likelihood'][param].log_prob(val))
                log_pdf += temperature*jnp.sum(self.likelihood.log_prob(params=phi_, f=position['f'], y=self.y))
                return log_pdf

            #
            key, subkey = jrnd.split(key)
            sub_state, sub_info = update_metropolis(subkey, logdensity_fn_, likelihood_params, 
                                                    stepsize=mcmc_parameters.get('stepsizes', dict()).get('likelihood', 0.1))
            for param, val in sub_state.items():
                position[param] = val
        #

        # update Z  # HACK: Deactivated Z
        if False:
            Z_params = self.__get_component_parameters(
                position, 
                'inducing_inputs_Z')

            # Get updated cov. parameters und u samples
            mean_params = self.__get_component_parameters(position, 'mean')
            cov_params = self.__get_component_parameters(position, 'kernel')

            def logdensity_fn_(Z_):
                curr_Z = Z_['Z']

                log_pdf = 0
        
                # P(Z)
                tmp = jnp.sum(dx.Normal(
                    loc=Z_params['mean'],
                    scale=Z_params['scale']).log_prob(curr_Z))
                log_pdf += tmp
                '''jax.debug.print(
                    "🧐 P(Z) (log)density: {logd} {d}", 
                    logd = tmp, d=jnp.exp(tmp))'''

                # p(f | u, Z, theta, X)
                mean_gp, cov_gp = self._compute_sparse_gp(
                    cov_params=cov_params, 
                    x=self.X,
                    samples_Z=curr_Z,
                    samples_u=position['u'])
                cov_gp += jitter * jnp.eye(self.n)
                tmp = dx.MultivariateNormalFullCovariance(mean_gp, cov_gp).log_prob(position['f'])

                log_pdf += tmp
                '''jax.debug.print(
                    "🧐 f (log)density: {logd} {d}", 
                    logd = tmp, d=jnp.exp(tmp))'''

                # p(u | Z, theta)
                mean_u = self.mean_fn.mean(params=mean_params, x=curr_Z)
                cov_u = self.cov_fn.cross_covariance(
                    params=cov_params,
                    x=curr_Z,
                    y=curr_Z)
                cov_u += jitter * jnp.eye(curr_Z.shape[0])
                tmp = dx.MultivariateNormalFullCovariance(
                    mean_u, 
                    cov_u).log_prob(position['u'])
                log_pdf += tmp
                '''jax.debug.print(
                    "🧐 u (log)density: {logd} {d}", 
                    logd = tmp, d=jnp.exp(tmp))
                
                jax.debug.print('---------------------\n')'''

                return log_pdf

            key, subkey = jrnd.split(key)
            sub_state, sub_info = update_metropolis(  
                subkey, 
                logdensity_fn_, 
                # NOTE: Packing Z samples into dict for metropolis update
                # how does that work for other variables? -> They get a whole gibbs_state
                {'Z': position['Z']},  
                stepsize=mcmc_parameters.get(
                    'stepsizes', 
                    dict()).get('kernel', 0.1))
            
            for param, val in sub_state.items():  # HACk: deactivated Z
                position[param] = val

        # update u  # HACK: Deactivated u
        if False:
            # get updated cov. parameters theta
            cov_params = self.__get_component_parameters(position, 'kernel')

            mean_u = self.mean_fn.mean(params=mean_params, x=position['Z'])
            cov_u = self.cov_fn.cross_covariance(
                params=cov_params,
                x=position['Z'],
                y=position['Z'])
            cov_u += jitter * jnp.eye(position['Z'].shape[0])

            def loglikelihood_fn_(u_):
                mean, cov = self._compute_sparse_gp(
                    cov_params=cov_params, 
                    x=self.X,
                    samples_Z=position['Z'],
                    samples_u=u_)

                # NOTE: left temprature out, but is needed for actualy data depnedent likeliehood.
                return dx.MultivariateNormalFullCovariance(mean, cov).log_prob(position['f'])

            key, subkey = jrnd.split(key)
            position['u'], f_info = update_correlated_gaussian(
                subkey, 
                position['u'], 
                loglikelihood_fn_, 
                mean_u, cov_u)
        
        return GibbsState(
            position=position), None  # We return None to satisfy SMC; this needs to be filled with acceptance information

    # TODO: Old version, needs changing for SMC
    def loglikelihood_fn(self) -> Callable:
        """Returns the log-likelihood function for the model given a state.

        Args:
            None

        Returns:
            A function that computes the log-likelihood of the model given a
            state.
        """
        def loglikelihood_fn_(state: GibbsState) -> Float:
            # position = state.position
            position = getattr(state, 'position', state)
            phi = {param: position[param] for param in
                   self.param_priors['likelihood']} if 'likelihood' in self.param_priors else {}
            f = position['f']
            log_pdf = jnp.sum(self.likelihood.log_prob(params=phi, f=f, y=self.y))
            return log_pdf

        #
        return loglikelihood_fn_

    # TODO: Old version, but perhaps not used.
    def logprior_fn(self) -> Callable:
        """Returns the log-prior function for the model given a state.

        Args:
            None
        Returns:
            A function that computes the log-prior of the model given a state.

        """

        def logprior_fn_(state: GibbsState) -> Float:
            position = getattr(state, 'position', state)  # to work in both Blackjax' MCMC and SMC environments
            logprob = 0
            for component, params in self.param_priors.items():
                # mean, kernel, likelihood
                for param, dist in params.items():
                    # parameters per component
                    logprob += jnp.sum(dist.log_prob(position[param]))
            # plus the logprob of the latent f itself
            psi = {param: position[param] for param in self.param_priors['mean']} if 'mean' in self.param_priors else {}
            theta = {param: position[param] for param in
                     self.param_priors['kernel']} if 'kernel' in self.param_priors else {}
            mean = self.mean_fn.mean(params=psi, x=self.X).flatten()
            cov = self.cov_fn.cross_covariance(params=theta,
                                               x=self.X,
                                               y=self.X) + jitter * jnp.eye(self.n)
            logprob += dx.MultivariateNormalFullCovariance(mean, cov).log_prob(position['f'])
            return logprob

        #
        return logprior_fn_

    #
    def predict_f(model, key: PRNGKey, x_pred: ArrayTree, num_subsample=-1):
        """Predict the latent f on unseen pointsand

        This function takes the approximated posterior (either by MCMC or SMC)
        and predicts new latent function evaluations f^*.

        Args:
            key: PRNGKey
            x_pred: x^*; the queried locations.
            num_subsample: By default, we return one predictive sample for each
            posterior sample. While accurate, this can be memory-intensive; this
            parameter can be used to thin the MC output to every n-th sample.

        Returns:
            f_samples: An array of samples of f^* from p(f^* | x^*, x, y)


        todo:
        - predict using either SMC or MCMC output
        - predict from prior if desired
        """

        @jax.jit
        def sample_predictive_f(key, x_pred: ArrayTree, **samples):
            """Sample latent f for new points x_pred given one posterior sample.

            See Rasmussen & Williams. We are sampling from the posterior predictive for
            the latent GP f, at this point not concerned with an observation model yet.

            We have [f, f*]^T ~ N(0, KK), where KK is a block matrix:

            KK = [[K(x, x), K(x, x*)], [K(x, x*)^T, K(x*, x*)]]

            This results in the conditional

            f* | x, x*, f ~ N(mu, cov), where

            mu = K(x*, x)K(x,x)^-1 f
            cov = K(x*, x*) - K(x*, x) K(x, x)^-1 K(x, x*)

            Args:
                key: The jrnd.PRNGKey object
                x_pred: The prediction locations x*
                state_variables: A sample from the posterior

            Returns:
                A single posterior predictive sample f*

            """

            def get_parameters_for(component):
                """Extract parameter sampled values per model component for current
                position.

                """
                return {param: samples[param] for param in
                        model.param_priors[component]} if component in model.param_priors else {}

            #

            f = samples['f']
            psi = get_parameters_for('mean')
            mean = model.mean_fn.mean(params=psi, x=x_pred).flatten()
            theta = get_parameters_for('kernel')

            Kxx = model.kernel.cross_covariance(params=theta, x=model.X, y=model.X)
            Kzx = model.kernel.cross_covariance(params=theta, x=x_pred, y=model.X)
            Kzz = model.kernel.cross_covariance(params=theta, x=x_pred, y=x_pred)

            Kxx += jitter * jnp.eye(*Kxx.shape)
            Kzx += jitter * jnp.eye(*Kzx.shape)
            Kzz += jitter * jnp.eye(*Kzz.shape)

            L = jnp.linalg.cholesky(Kxx)
            alpha = jnp.linalg.solve(L.T, jnp.linalg.solve(L, f))
            v = jnp.linalg.solve(L, Kzx.T)
            predictive_mean = mean + jnp.dot(Kzx, alpha)
            predictive_var = Kzz - jnp.dot(v.T, v)

            predictive_var += jitter * jnp.eye(*Kzz.shape)

            C = jnp.linalg.cholesky(predictive_var)
            z = jrnd.normal(key, shape=(len(x_pred),))

            f_samples = predictive_mean + jnp.dot(C, z)
            return f_samples

        #

        num_particles = model.particles.particles['f'].shape[0]
        key_samples = jrnd.split(key, num_particles)

        f_pred = jax.vmap(sample_predictive_f,
                            in_axes=(0, None))(key_samples, x_pred, 
                                            **model.particles.particles)
        return f_pred

    #
    def predict_y(self, key, x_pred):
        # todo; call predict_f first, then the dx random from the appropriate likelihood
        pass

    #
#